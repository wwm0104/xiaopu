<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chinaxiaopu.xiaopuMobi.mapper.PrizeMapper">
    <resultMap id="BaseResultMap" type="com.chinaxiaopu.xiaopuMobi.model.Prize">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <id column="creater_id" jdbcType="INTEGER" property="createrId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="prize" jdbcType="VARCHAR" property="prize"/>
        <result column="type" jdbcType="TINYINT" property="type"/>
        <result column="is_public" jdbcType="TINYINT" property="isPublic"/>
        <result column="available_time" jdbcType="TIMESTAMP" property="availableTime"/>
        <result column="expire_time" jdbcType="TIMESTAMP" property="expireTime"/>
        <result column="creater_realname" jdbcType="VARCHAR" property="createrRealname"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="has_limit" jdbcType="TINYINT" property="hasLimit"/>
        <result column="stock_total" jdbcType="INTEGER" property="stockTotal"/>
        <result column="stock_out" jdbcType="INTEGER" property="stockOut"/>
        <result column="available" jdbcType="TINYINT" property="available"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, creater_id, name, prize, type, is_public, available_time, expire_time, creater_realname,
    create_time, has_limit, stock_total, stock_out, available
  </sql>
    <select id="selectByExample" parameterType="com.chinaxiaopu.xiaopuMobi.model.PrizeExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from prizes
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="com.chinaxiaopu.xiaopuMobi.model.PrizeKey" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from prizes
        where id = #{id,jdbcType=INTEGER}
        and creater_id = #{createrId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="com.chinaxiaopu.xiaopuMobi.model.PrizeKey">
    delete from prizes
    where id = #{id,jdbcType=INTEGER}
      and creater_id = #{createrId,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.chinaxiaopu.xiaopuMobi.model.PrizeExample">
        delete from prizes
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.chinaxiaopu.xiaopuMobi.model.Prize">
    insert into prizes (id, creater_id, name,
      prize, type, is_public, 
      available_time, expire_time, creater_realname,
      create_time, has_limit, stock_total, 
      stock_out, available)
    values (#{id,jdbcType=INTEGER}, #{createrId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
      #{prize,jdbcType=VARCHAR}, #{type,jdbcType=TINYINT}, #{isPublic,jdbcType=TINYINT}, 
      #{availableTime,jdbcType=TIMESTAMP}, #{expireTime,jdbcType=TIMESTAMP}, #{createrRealname,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP}, #{hasLimit,jdbcType=TINYINT}, #{stockTotal,jdbcType=INTEGER}, 
      #{stockOut,jdbcType=INTEGER}, #{available,jdbcType=TINYINT})
  </insert>
    <insert id="insertSelective" parameterType="com.chinaxiaopu.xiaopuMobi.model.Prize">
        insert into prizes
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="createrId != null">
                creater_id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="prize != null">
                prize,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="isPublic != null">
                is_public,
            </if>
            <if test="availableTime != null">
                available_time,
            </if>
            <if test="expireTime != null">
                expire_time,
            </if>
            <if test="createrRealname != null">
                creater_realname,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="hasLimit != null">
                has_limit,
            </if>
            <if test="stockTotal != null">
                stock_total,
            </if>
            <if test="stockOut != null">
                stock_out,
            </if>
            <if test="available != null">
                available,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="createrId != null">
                #{createrId,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="prize != null">
                #{prize,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=TINYINT},
            </if>
            <if test="isPublic != null">
                #{isPublic,jdbcType=TINYINT},
            </if>
            <if test="availableTime != null">
                #{availableTime,jdbcType=TIMESTAMP},
            </if>
            <if test="expireTime != null">
                #{expireTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createrRealname != null">
                #{createrRealname,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="hasLimit != null">
                #{hasLimit,jdbcType=TINYINT},
            </if>
            <if test="stockTotal != null">
                #{stockTotal,jdbcType=INTEGER},
            </if>
            <if test="stockOut != null">
                #{stockOut,jdbcType=INTEGER},
            </if>
            <if test="available != null">
                #{available,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.chinaxiaopu.xiaopuMobi.model.PrizeExample"
            resultType="java.lang.Long">
        select count(*) from prizes
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update prizes
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.createrId != null">
                creater_id = #{record.createrId,jdbcType=INTEGER},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.prize != null">
                prize = #{record.prize,jdbcType=VARCHAR},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=TINYINT},
            </if>
            <if test="record.isPublic != null">
                is_public = #{record.isPublic,jdbcType=TINYINT},
            </if>
            <if test="record.availableTime != null">
                available_time = #{record.availableTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.expireTime != null">
                expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.createrRealname != null">
                creater_realname = #{record.createrRealname,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.hasLimit != null">
                has_limit = #{record.hasLimit,jdbcType=TINYINT},
            </if>
            <if test="record.stockTotal != null">
                stock_total = #{record.stockTotal,jdbcType=INTEGER},
            </if>
            <if test="record.stockOut != null">
                stock_out = #{record.stockOut,jdbcType=INTEGER},
            </if>
            <if test="record.available != null">
                available = #{record.available,jdbcType=TINYINT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update prizes
        set id = #{record.id,jdbcType=INTEGER},
        creater_id = #{record.createrId,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        prize = #{record.prize,jdbcType=VARCHAR},
        type = #{record.type,jdbcType=TINYINT},
        is_public = #{record.isPublic,jdbcType=TINYINT},
        available_time = #{record.availableTime,jdbcType=TIMESTAMP},
        expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
        creater_realname = #{record.createrRealname,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        has_limit = #{record.hasLimit,jdbcType=TINYINT},
        stock_total = #{record.stockTotal,jdbcType=INTEGER},
        stock_out = #{record.stockOut,jdbcType=INTEGER},
        available = #{record.available,jdbcType=TINYINT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.chinaxiaopu.xiaopuMobi.model.Prize">
        update prizes
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="prize != null">
                prize = #{prize,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=TINYINT},
            </if>
            <if test="isPublic != null">
                is_public = #{isPublic,jdbcType=TINYINT},
            </if>
            <if test="availableTime != null">
                available_time = #{availableTime,jdbcType=TIMESTAMP},
            </if>
            <if test="expireTime != null">
                expire_time = #{expireTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createrRealname != null">
                creater_realname = #{createrRealname,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="hasLimit != null">
                has_limit = #{hasLimit,jdbcType=TINYINT},
            </if>
            <if test="stockTotal != null">
                stock_total = #{stockTotal,jdbcType=INTEGER},
            </if>
            <if test="stockOut != null">
                stock_out = #{stockOut,jdbcType=INTEGER},
            </if>
            <if test="available != null">
                available = #{available,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
        and creater_id = #{createrId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.chinaxiaopu.xiaopuMobi.model.Prize">
    update prizes
    set name = #{name,jdbcType=VARCHAR},
      prize = #{prize,jdbcType=VARCHAR},
      type = #{type,jdbcType=TINYINT},
      is_public = #{isPublic,jdbcType=TINYINT},
      available_time = #{availableTime,jdbcType=TIMESTAMP},
      expire_time = #{expireTime,jdbcType=TIMESTAMP},
      creater_realname = #{createrRealname,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      has_limit = #{hasLimit,jdbcType=TINYINT},
      stock_total = #{stockTotal,jdbcType=INTEGER},
      stock_out = #{stockOut,jdbcType=INTEGER},
      available = #{available,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
      and creater_id = #{createrId,jdbcType=INTEGER}
  </update>

    <select id="selectAllPrizesType" resultMap="BaseResultMap"
            parameterType="com.chinaxiaopu.xiaopuMobi.dto.MyTopicParam">
        SELECT DISTINCT p.type FROM prizes p
        WHERE
        (p.expire_time &gt; now()
        AND p.available_time &lt; now()
        AND p.is_public = 0
        AND stock_total &gt; stock_out
        AND p.available = 1
        )
        <!-- 开放个人创建奖品时放开
        OR (p.expire_time &gt; now()
        AND p.available_time &lt; now() AND stock_total &gt; stock_out
        AND p.creater_id = #{userId}
        )
        -->
    </select>

    <select id="selectPrizesNameByTypeForOffical" resultMap="BaseResultMap"
            parameterType="com.chinaxiaopu.xiaopuMobi.model.Prize">
        SELECT * FROM prizes p
        WHERE
        (p.expire_time &gt; now()
        AND p.available_time &lt; now()
        AND p.is_public != 1
        AND stock_total &gt; stock_out
        AND p.type = #{type}
        AND p.available = 1
        )
        <!-- 开放个人创建奖品时放开
        OR (p.expire_time &gt; now()
        AND p.available_time &lt; now() AND stock_total &gt; stock_out
        AND p.creater_id = #{userId}
        AND p.type = #{type}
        )
        -->
    </select>

    <select id="selectPrizesNameByType" resultMap="BaseResultMap"
            parameterType="com.chinaxiaopu.xiaopuMobi.model.Prize">
        SELECT * FROM prizes p
        WHERE
        (p.expire_time &gt; now()
        AND p.available_time &lt; now()
        AND p.is_public = 0
        AND stock_total &gt; stock_out
        AND p.type = #{type}
        AND p.available = 1
        )
        <!-- 开放个人创建奖品时放开
        OR (p.expire_time &gt; now()
        AND p.available_time &lt; now() AND stock_total &gt; stock_out
        AND p.creater_id = #{userId}
        AND p.type = #{type}
        )
        -->
    </select>

    <update id="updateStockById" parameterType="java.lang.Integer">
    UPDATE prizes
    SET stock_out = stock_out+1
    WHERE id=#{prizeId}
  </update>

    <select id="selectPrizeById" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    SELECT * FROM prizes
    WHERE id = #{prizeId}
  </select>

    <select id="selectPrizeList" parameterType="map" resultType="com.chinaxiaopu.xiaopuMobi.vo.topic.PrizeVo">
        SELECT t.id,name,t.prize,t.type,t.is_public AS isPublic,t.available_time AS availableTime,t.expire_time AS
        expireTime,t.creater_id AS createrId,t.creater_realname AS createrRealname,
        t.create_time AS createTime,t.has_limit AS hasLimit,t.stock_total AS stockTotal,t.stock_out AS
        stockOut,t.available,t1.sort
        FROM prizes t
        LEFT JOIN recommend t1 on t1.pid = t.id and t1.parent_type = 3
        WHERE 1=1
        <if test="type != null">
            AND t.type = #{type,jdbcType=TINYINT}
        </if>
        <if test="status != null">
            AND t.available = #{status,jdbcType=TINYINT}
        </if>
        <if test="isPublic != null">
            AND t.is_public = #{isPublic,jdbcType=TINYINT}
        </if>
        <if test="sort != null">
            AND t1.sort &gt;0
        </if>
        ORDER BY id DESC
    </select>
    <select id="selectByPrizeId" parameterType="map" resultType="com.chinaxiaopu.xiaopuMobi.vo.topic.PrizeVo">
     SELECT id,name,prize,type,is_public AS isPublic,available_time AS availableTime,expire_time AS expireTime,creater_id AS createrId,creater_realname AS createrRealname,
             create_time AS createTime,has_limit AS hasLimit,stock_total AS stockTotal,stock_out AS stockOut,available
     FROM prizes WHERE id = #{id,jdbcType=TINYINT}
  </select>
    <select id="prizeScan" resultMap="BaseResultMap">
    <![CDATA[


    SELECT * FROM prizes WHERE (stock_total = stock_out OR expire_time < NOW()) AND available = 1


        ]]>
  </select>

    <update id="giveBackStock" parameterType="java.lang.Integer">
    UPDATE prizes SET stock_out = stock_out - 1
    WHERE id = #{prizeId}
  </update>

    <!--首页奖品推荐-->
    <select id="recommentPrizes" resultType="com.chinaxiaopu.xiaopuMobi.vo.topic.PrizesRecommVo">
    SELECT
        t.pid prizeId,
        t1.`name` prizeName,
        t1.prize
     FROM
	    recommend t
    LEFT JOIN prizes t1 on t1.id = t.pid
    WHERE t1.available = 1 and t1.is_public = 0 and t.parent_type = 3
    ORDER BY t.sort DESC
    </select>


    <resultMap id="BaseResultMap1" type="com.chinaxiaopu.xiaopuMobi.vo.topic.PrizesListVo">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <id column="creater_id" jdbcType="INTEGER" property="createrId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="prize" jdbcType="VARCHAR" property="prize"/>
        <result column="type" jdbcType="TINYINT" property="type"/>
        <result column="is_public" jdbcType="TINYINT" property="isPublic"/>
        <result column="available_time" jdbcType="TIMESTAMP" property="availableTime"/>
        <result column="expire_time" jdbcType="TIMESTAMP" property="expireTime"/>
        <result column="creater_realname" jdbcType="VARCHAR" property="createrRealname"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="has_limit" jdbcType="TINYINT" property="hasLimit"/>
        <result column="stock_total" jdbcType="INTEGER" property="stockTotal"/>
        <result column="stock_out" jdbcType="INTEGER" property="stockOut"/>
        <result column="available" jdbcType="TINYINT" property="available"/>
        <result column="pk_cnt" jdbcType="TINYINT" property="pkCnt"/>
        <result column="vote_cnt" jdbcType="TINYINT" property="voteCnt"/>
    </resultMap>

    <select id="selectAllPrizeAndPkCount" parameterType="com.chinaxiaopu.xiaopuMobi.dto.topic.PrizeListDto"
            resultMap="BaseResultMap1">
        SELECT * FROM
        (SELECT pp.*,IFNULL(t.pk_cnt,0) pk_cnt, IFNULL(v.vote_cnt,0) vote_cnt FROM prizes pp
        LEFT JOIN
        (SELECT prize_id,count(*) pk_cnt FROM topic_pk
        GROUP BY prize_id) t
        ON t.prize_id = pp.id
        LEFT JOIN
        (SELECT p.id prizeId,sum(ppr.vote_cnt) vote_cnt FROM prizes p
        LEFT JOIN topic_pk tp
        ON tp.prize_id = p.id
        LEFT JOIN pk_vote_result ppr
        ON tp.id = ppr.pk_id
        GROUP BY p.id) v
        ON pp.id = v.prizeId
        ) s
        WHERE 1=1
        <if test="prizeType != null">
            AND s.type = #{prizeType}
        </if>
        <if test="isHaveChance == 1">
            AND s.available = 1
            AND s.stock_total &gt; s.stock_out
            AND s.available_time &lt; now()
            AND s.expire_time &gt; now()
        </if>
        <if test="isHaveChance == 2">
            AND
            ( s.available != 0
            OR s.stock_total = s.stock_out
            OR s.stock_total &lt; s.stock_out
            OR s.available_time &gt; now()
            OR s.expire_time &lt; now()
            )
        </if>
        <if test="prizeName != null">
            AND s.name LIKE CONCAT('%',#{prizeName},'%')
        </if>
        <if test="orderType == 1">
            ORDER BY pk_cnt DESC
        </if>
        <if test="orderType == 2">
            ORDER BY pk_cnt
        </if>
        <if test="orderType == 3">
            ORDER BY vote_cnt DESC
        </if>
        <if test="orderType == 4">
            ORDER BY vote_cnt
        </if>
    </select>


    <resultMap id="UserBaseResultMap" type="com.chinaxiaopu.xiaopuMobi.dto.UserInfoListDto">
        <id column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="school_id" jdbcType="INTEGER" property="schoolId"/>
        <result column="school_name" jdbcType="VARCHAR" property="schoolName"/>
        <result column="mobile" jdbcType="BIGINT" property="mobile"/>
        <result column="nick_name" jdbcType="VARCHAR" property="nickName"/>
        <result column="real_name" jdbcType="VARCHAR" property="realName"/>
        <result column="user_sex" jdbcType="TINYINT" property="userSex"/>
        <result column="student_no" jdbcType="VARCHAR" property="studentNo"/>
        <result column="qq" jdbcType="VARCHAR" property="qq"/>
        <result column="valid" jdbcType="TINYINT" property="valid"/>
        <result column="is_president" jdbcType="TINYINT" property="isPresident"/>
        <result column="avatar_url" jdbcType="VARCHAR" property="avatarUrl"/>
        <result column="slogan" jdbcType="VARCHAR" property="slogan"/>
        <result column="vote_cnt" jdbcType="BIGINT" property="voteCnt"/>
    </resultMap>
    <select id="selectRwardUserByPrizeId" parameterType="java.lang.Integer" resultMap="UserBaseResultMap">
        SELECT ui.*,ts.slogan,pvr.vote_cnt FROM pk_prize_result ppr
        LEFT JOIN topic_pk tp ON tp.topic_id = ppr.challenge_topic_id
        LEFT JOIN user_info ui ON ui.user_id = ppr.reward_user_id
        LEFT JOIN topics ts ON ts.id = tp.topic_id
        LEFT JOIN pk_vote_result pvr ON pvr.pk_id = ppr.pk_id AND pvr.creator_id = ui.user_id
        WHERE tp.prize_id = #{prizeId}
    </select>
</mapper>